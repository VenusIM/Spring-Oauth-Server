package com.venusim.auth.global.filter;import com.venusim.auth.global.util.AuthUtil;import com.venusim.auth.global.util.ParamOverrideRequest;import jakarta.servlet.FilterChain;import jakarta.servlet.ServletException;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.lang.NonNull;import org.springframework.stereotype.Component;import org.springframework.web.filter.OncePerRequestFilter;import java.io.BufferedReader;import java.io.IOException;import java.net.URLDecoder;import java.nio.charset.StandardCharsets;import java.util.Base64;import java.util.LinkedHashMap;import java.util.Map;import java.util.stream.Collectors;@Componentpublic class TokenBodyDecryptFilter extends OncePerRequestFilter {    private final AuthUtil authUtil;    @Autowired    public TokenBodyDecryptFilter(AuthUtil authUtil) {        this.authUtil = authUtil;    }    @Override    protected void doFilterInternal(HttpServletRequest request, @NonNull HttpServletResponse response, @NonNull FilterChain filterChain) throws ServletException, IOException {        // Check for content type        if ("text/plain".equalsIgnoreCase(request.getContentType()) &&                (request.getRequestURI().startsWith("/oauth2"))) {            String body = new BufferedReader(request.getReader())                    .lines().collect(Collectors.joining());            String base64 = URLDecoder.decode(body, StandardCharsets.UTF_8);            String auth = request.getHeader("Authorization");            if (auth != null && auth.startsWith("Basic ")) {                base64 = base64.replace(" ", "+"); // 공백 보정                try {                    String decodedParameter = authUtil.decryptBase64(base64);                    // "a=b&c=d" → Map<String, String[]>, URL decode 적용                    Map<String, String[]> overrides = new LinkedHashMap<>();                    for (String pair : decodedParameter.split("&")) {                        if (pair.isEmpty()) continue;                        int idx = pair.indexOf('=');                        final String rawKey = (idx >= 0) ? pair.substring(0, idx) : pair;                        final String rawVal = (idx >= 0) ? pair.substring(idx + 1) : "";                        String k = URLDecoder.decode(rawKey, StandardCharsets.UTF_8);                        String v = URLDecoder.decode(rawVal, StandardCharsets.UTF_8);                        overrides.put(k, new String[]{v});                    }                    String decryptedAuth = authUtil.decryptBase64(auth.substring(6));                    String newAUth = Base64.getEncoder().encodeToString(decryptedAuth.getBytes(StandardCharsets.UTF_8));                    // 파라미터만 교체한 request로 체인 진행                    HttpServletRequest wrapped = new ParamOverrideRequest(request, overrides, "Basic " + newAUth);                    filterChain.doFilter(wrapped, response);                    return;                } catch (IllegalArgumentException e) {                    logger.warn("Failed to decode/decrypt jwt param", e);                } catch (Exception e) {                    logger.error("Decrypt error", e);                }            }        }        filterChain.doFilter(request, response);    }}